<?xml version="1.0"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
There has to be one entity for each item to be referenced.
An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC1035 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2606 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2606.xml">
<!ENTITY RFC2782 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2782.xml">
<!ENTITY RFC2845 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2845.xml">

]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
(Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<?rfc tocappendix="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
(using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc comments="no" ?>
<?rfc inline="yes" ?>
<rfc category="exp" docName="draft-muks-dnsop-dns-catalog-zones-01" ipr="trust200902">

  <front>

    <title>DNS catalog zones</title>

    <author fullname="Stephen Morris" initials="S." surname="Morris">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>94063</code>
          <region>CA</region>
          <country>US</country>
        </postal>
        <email>stephen@isc.org</email>
        <uri>http://www.isc.org/</uri>
      </address>
    </author>

    <author fullname="Mukund Sivaraman" initials="M." surname="Sivaraman">
      <organization>Internet Systems Consortium</organization>
      <address>
        <postal>
          <street>950 Charter Street</street>
          <city>Redwood City</city>
          <code>94063</code>
          <region>CA</region>
          <country>US</country>
        </postal>
        <email>muks@mukund.org</email>
        <uri>http://www.isc.org/</uri>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>Internet Area</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- <keyword>dns</keyword> -->

    <abstract>
      <t>This document describes a method for automatic zone catalog
      provisioning and synchronization among DNS master and slave
      nameservers by storing and transferring the catalogs as regular
      DNS zones.</t>
    </abstract>

  </front>

  <middle>

    <section title="Introduction">
      <t>DNS nameservers implement AXFR and IXFR for zone data
      synchronization among a master and its slaves, but the list of
      zones served (called a catalog in <xref target="RFC1035" />) is
      not automatically synchronized. The administrator of a DNS
      nameserver farm has to manually, or via an additional layer of
      scripting, synchronize such zone catalogs among masters and their
      slaves. This can be inconvenient, error-prone and dependent on the
      nameserver implementation.</t>

      <t>A method for automatic zone catalog provisioning and
      synchronization is useful, so that the zone catalog can be
      maintained in one master location by an administrator, similar to
      zone data.</t>

      <t>This document describes one such method, in which the catalog
      is represented as a regular DNS zone called a "catalog zone", and
      transferred using zone transfers. The representation of catalogs
      within DNS zones is specified and nameserver requirements are
      listed so that DNS implementations can support catalog zones.</t>

      <t>A glossary of some terms used in this memo is provided in <xref
      target="sec-glossary" />.</t>

      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL"
      in this document are to be interpreted as described in <xref
      target="RFC2119" />.</t>
    </section>

    <section title="Catalog zones" anchor="sec-catzones">
      <section title="Description">
	<t>A catalog zone is a specially crafted DNS zone that contains,
	as DNS zone data, a list of DNS zones called member zones and
	associated template zone configuration common to all its member
	zones. A catalog zone can also include other catalog zones, but
	template zone configuration present in a catalog zone only
	applies to its immediate member zones. A catalog zone is meant
	to be used to provision DNS catalogs to nameservers via zone
	transfers, for the purpose of setting up member zones to be
	served from these nameservers.</t>

	<t>The contents and representation of catalog zones are
	described under <xref target="sec-catzones" />. Nameserver
	behavior is described in <xref target="sec-impl" />.</t>

	<t>A catalog zone overrides the meanings of various RR types to
	achieve its purpose. Though this may be controversial, the
	situation is not different from other similar zone-based
	representations such as response-policy zones <xref target="RPZ"
	/>. Other than being transmitted via zone transfers, catalog
	zones are not directly visible in the DNS and are not meant to
	be served via DNS QUERY (<xref target="RFC1035" />).</t>

	<t>Member zones' configuration is specified as a list of zone
	properties. Each zone property has a name and an associated
	value of a specific data type. Zone property value data types
	are described in <xref target="sec-types" />. Zone property
	names are case-insensitive. Each zone property uses one data
	type only for its values. A list of permitted zone property
	names and their data types is given in <xref
	target="sec-properties" />.</t>

	<t>TBD: Transitive catalogs</t>
      </section>

      <section title="Resource record fields">
	<t>A catalog zone contains various resource records (RRs). They
	have NAME, TYPE, CLASS, TTL, RDLENGTH and RDATA as fields (as
	defined in <xref target="RFC1035" />).</t>

	<t>The NAME field contains the owner name of the respective
	RR. As with all DNS zones, the owner name must be a child of the
	catalog zone name.</t>

	<t>The TYPE field depends on the type of catalog zone property
	value being represented. <xref target="sec-types" /> describes
	how various zone property value types are represented.</t>

	<t>The CLASS field of the RR MUST be set to the value 1 (IN) as
	defined in <xref target="RFC1035" />.</t>

	<t>The TTL field is not used as these RRs are not meant to be
	served via DNS QUERY. It SHOULD be set to 1.</t>

	<t>The RDLENGTH field contains the length of the RDATA field.</t>

	<t>The content of the RDATA field depends on the type of catalog
	zone property value being represented. <xref target="sec-types"
	/> describes how various zone property value types are
	represented.</t>
      </section>

      <section title="SOA and NS records at apex">
	<t>Similar to any other DNS zone, a catalog zone would be
	expected to have a syntactically correct SOA record and one or
	more NS records at its apex.</t>

	<t>The SOA record's SERIAL, REFRESH, RETRY and EXPIRE fields (as
	defined in <xref target="RFC1035" />) are used during zone
	transfer. A catalog zone's SOA SERIAL field MUST increase when
	an update is made to the catalog zone's contents. Otherwise,
	slave nameservers may not notice updates to the catalog zone's
	contents.</t>
	
	<t>The SOA record's MINIMUM field (as defined in <xref
	target="RFC1035" />) is supposed to contain a minimum TTL value
	which is not applicable to catalog zones. It MUST be set to 1 in
	all catalog zones. Master and slave nameservers MUST NOT use
	catalog zones with an unexpected value in the SOA MINIMUM field
	as catalog zones. However, they may be transferred.</t>

	<t>As catalog zones are not meant to be part of the DNS, NS
	records at the apex are not used but they are still required so
	that catalog zones are syntactically correct DNS zones. No
	parent delegation for the catalog zone is required. Any valid
	DNS name can be used in the NSDNAME field of such NS records (as
	defined in <xref target="RFC1035" />) and they will be
	ignored. A single NS RR with an NSDNAME field containing the
	absolute name "invalid." is recommended (see <xref
	target="RFC2606" />).</t>
      </section>

      <section title="Zone property value data types" anchor="sec-types">
	<section title="Single name" anchor="sec-sname">
	  <t>A property containing a single name as value is specified
	  using a CNAME RR (see <xref target="RFC1035" />) with owner
	  name set to the name of the property as a sub-domain of the
	  catalog zone name, and RDATA set to the property value.</t>
	  
	  <t>For example, if a catalog zone is named
	  "catalog1.example.org." and contains a property "prop1" with
	  value "val1.example.com.", the corresponding RR may look as
	  follows:</t>
	  
	  <figure>
	    <artwork>
	prop1.catalog1.example.org. 3600 IN CNAME val1.example.com.
	    </artwork>
	  </figure>

	  <t>Here, "prop1" can only contain one name. It cannot be a
	  list of names. It is restricted by the use of the CNAME RR
	  type.</t>
	</section>

	<section title="Unordered list of names" anchor="sec-unolist">
	  <t>Let N be an absolute name formed by concatenating the
	  member zone name hash (see <xref target="sec-glossary" />),
	  the name of the property, and the catalog zone name in that
	  order, such that N is a unique owner name in the catalog
	  zone.</t>
	  
	  <t>Then, a property containing an unordered list of names as
	  value is specified using multiple PTR RRs (see <xref
	  target="RFC1035" />) with owner name set to N, and each RR's
	  RDATA set to each name in the list of the property's value
	  respectively.</t>
	  
	  <t>For example, if a catalog zone is named
	  "catalog1.example.org." and contains a property "prop2" with
	  its value being an unordered list of two names
	  "a.example.com." and "b.example.com.", the corresponding RRs
	  may look as follows:</t>
	  
	  <figure>
	    <artwork>
	&lt;hash&gt;.prop2.catalog1.example.org. 3600 IN PTR a.example.com.
	&lt;hash&gt;.prop2.catalog1.example.org. 3600 IN PTR b.example.com.
	    </artwork>
	  </figure>

	  <t>Here, the property "prop2" can contain one or more names as
	  its value but they are not ordered.</t>
	</section>

	<section title="Ordered list of names" anchor="sec-olist">
	  <t>Let N be an absolute name formed by concatenating the
	  member zone name hash (see <xref target="sec-glossary" />),
	  the name of the property, and the catalog zone name in that
	  order, such that N is a unique owner name in the catalog
	  zone.</t>
	  
	  <t>Then, a property containing an ordered list of names as
	  value is specified using multiple SRV RRs (see <xref
	  target="RFC2782" />) with owner name set to N. The RDATA of
	  each SRV RR contains the Priority, Weight, Port and Target
	  fields. Over multiple SRV RRs, the Target field should be set
	  to each name in the list of the property's value
	  respectively. The &lt;Priority, Weight, Port&gt; fields in
	  that sequence form a sort ordering tuple, and their values
	  should be set to numbers that represents this name's relative
	  order (in ascending order) in the ordered list of names. As
	  Priority, Weight and Port are 16-bit fields, it's possible to
	  order 1&lt;&lt;48 different names within a single
	  zone property value.</t>
	  
	  <t>For example, if a catalog zone is named
	  "catalog1.example.org." and contains a property "prop3" with
	  its value being an ordered list of three names
	  "n1.example.com.", "n2.example.com." and "n3.example.com." in
	  that order, the corresponding RRs may look as follows:</t>
	  
	  <figure>
	    <artwork>
	&lt;hash&gt;.prop3.catalog1.example.org. 3600 IN SRV 0 0 1 n1.example.com.
	&lt;hash&gt;.prop3.catalog1.example.org. 3600 IN SRV 0 0 2 n2.example.com.
	&lt;hash&gt;.prop3.catalog1.example.org. 3600 IN SRV 0 0 3 n3.example.com.
	    </artwork>
	  </figure>

	  <t>Here, the property "prop3" can contain one or more names as
	  its value and they are ordered.</t>
	</section>

	<section title="Hosts">
	  <t>TBD.</t>
	</section>

	<section title="Networks">
	  <t>TBD.</t>
	</section>

	<section title="Comments">
	  <t>Comments may be added anywhere in a catalog zone using TXT
	  RRs (see <xref target="RFC1035" />). All TXT RRs are ignored
	  when generating a catalog from the catalog zone. However they
	  MUST be preserved and transferred as part of the zone.</t>
	</section>

	<section title="Zone properties specific to a member zone">
	  <t>TBD: Direct zone properties (viz. Stephen's review)</t>
	</section>

      </section>

      <section title="Zone configuration properties" anchor="sec-properties">
	<section title="zone-soa-default-serial">
	  <t>TBD.</t>
	</section>
	<section title="zone-soa-default-refresh">
	  <t>TBD.</t>
	</section>
      </section>

      <section title="List of member zones">
	<t>The list of member zones are specified as an unordered list
	(see <xref target="sec-unolist" />) of names under the owner
	name "zones" where "zones" is a sub-domain of the catalog
	zone.</t>

	<t>For example, if a catalog zone is named
	"catalog1.example.org." and lists 3 zones "example.com.",
	"example.net." and "example.org.", the RRs may look as
	follows:</t>
	
	<figure>
	  <artwork>
	&lt;hash&gt;.zones.catalog1.example.org. 3600 IN PTR example.com.
	&lt;hash&gt;.zones.catalog1.example.org. 3600 IN PTR example.net.
	&lt;hash&gt;.zones.catalog1.example.org. 3600 IN PTR example.org.
	  </artwork>
	</figure>
      </section>

      <section title="Examples of catalog zones">
	<t>TBD.</t>
      </section>
    </section>

    <section title="Nameserver behavior and requirements" anchor="sec-impl">
      <t>Explain nameserver behavior briefly here.</t>

      <t>As it is a regular DNS zone, a catalog zone can be
      transferred using DNS zone transfers among nameservers. Catalog
      zones are not part of the DNS, so they SHOULD NOT be served via
      DNS QUERY. It may be impractical to serve some contents of
      catalog zones via DNS queries anyway due to message size
      constraints.</t>
      
      <t>Catalog updates should be automatic, i.e., when a nameserver
      that supports catalog zones completes a zone transfer for a
      catalog zone, it SHOULD apply changes to the catalog within the
      running nameserver automatically without any manual
      intervention.</t>
      
      <t>As with regular zones, master and slave nameservers for a
      catalog zone may be operated by different administrators. The
      slave nameservers may be configured to synchronize catalog zones
      from the master, but the master's administrators may not have
      any administrative access to the slaves.</t>
      
      <t>A catalog zone can be updated via DNS UPDATE on a master, or
      via zone transfers. Nameservers MAY allow broken zones with
      incorrect catalog zone syntax (as they are treated as regular
      zones), but nameservers MUST NOT process such broken zones as
      catalog zones. For the purpose of catalog processing, the broken
      catalogs MUST be ignored.</t>

      <t>If there is a clash between an existing member zone's name and
      an incoming member zone's name (via transfer or update), the new
      instance of the zone MUST be ignored and an error SHOULD be
      logged.</t>
      
      <t>When zones are introduced into a catalog, a master MUST first
      make the new zones available for transfers before making the
      updated catalog zone available for transfer, or sending NOTIFY
      for the catalog zone to slaves.</t>
      
      <t>Transfers of the catalog zone MUST be protected via TSIG (as
      defined in <xref target="RFC2845" />). A master MUST NOT serve a
      catalog zone without TSIG and a slave MUST abandon an update to
      a catalog zone that was received without TSIG.</t>
      
      <t>TBD: Transitive master-slave relationships</t>
      
    </section>
    
    <section title="Open issues and discussion">
      <t><list style="numbers">
	<t>Config options
	<vspace blankLines="1"/>
	We want catalog zones to be adopted by multiple DNS
	implementations. Towards this, we have to generalize zone
	config options and adopt a minimal set that we can expect
	most implementations to support.
	</t>
	<t>Catalog zone and member zones on different masters
	<vspace blankLines="1"/>
	Will it be possible to setup a catalog zone on one
	nameserver as master, and allow its member zones to be
	served by different master namesservers?
	</t>
	<t>Transitive relationships
	<vspace blankLines="1"/>
	For a catalog zone, a slave may be a master to a different
	nameservers in a nameserver farm. In these transitive
	relationships, zone configuration options (such as
	also-notify and allow-transfer) may differ based on the
	location of the master in the hierarchy. It may not be
	possible to specify this within a catalog zone.
	</t>
	<t>DNSSEC and catalog zones
	<vspace blankLines="1"/>
	Catalog zones do not need to be signed. Their zone transfers
	are authenticated by TSIG. Are there any reasons why signing
	catalog zones would be useful?
	</t>
	<t>Templates
	<vspace blankLines="1"/>
	Are support for config and zone data templates useful at
	this level? They would add complexity across
	implementations. If added, it would be better to restrict
	templates at the master and let the slave receive regular
	expanded zones.
	</t>
	<t>Overriding controls
	<vspace blankLines="1"/>
	A way to override zone config options (as prescribed by the
	catalog zones) on slaves was requested. As this would be
	configured outside catalog zones, it may be better to leave
	this to implementations.
	</t>
	<t>Choice of hash function
	<vspace blankLines="1"/>
	Should a different faster hash function be chosen to replace
	SHA-1 when computing catalog member zone name hashes?
	</t>
      </list></t>
    </section>

    <section title="Security considerations">
      <t>As catalog zones are transmitted using DNS zone transfers, it
      is absolutely essential for these transfers to be protected from
      unexpected modifications on the route. So, it is a requirement
      that catalog zone transfers MUST be authenticated using TSIG (see
      <xref target="RFC2845" />).</t>

      <t>Zone transfers of member zones MUST similarly be authenticated
      using TSIG (see <xref target="RFC2845" />). The TSIG shared
      secrets used for member zones are identical to those used for the
      catalog zones. Details of the shared secrets MUST NOT be mentioned
      anywhere in the catalog zone data.</t>
    </section>

    <section title="IANA considerations">
      <t>This document has no actions for IANA.</t>
    </section>

    <section title="Acknowledgements">
      <t>Catalog zones originated as the chosen method among various
      proposals that were evaluated at ISC for easy zone management. The
      chosen method of storing the catalog as a regular DNS zone was
      proposed by Stephen Morris.</t>
      
      <t>We later discovered that Paul Vixie's <xref target="Metazones"
      /> proposal implemented a similar approach and reviewed
      it. Catalog zones borrows some syntax ideas from Metazones, as
      both share this scheme of representing the catalog as a regular
      DNS zone.</t>
      
      <t>Thanks to Victoria Risk, Ray Bellis, Witold Krecicki for
      reviewing previous draft proposals and providing support, comments
      and suggestions.</t>

      <t>Thanks to BIND users who reviewed draft proposals and offered
      comments and suggestions.</t>
    </section>

  </middle>

  <back>

    <references title="Normative references">
      &RFC1035;
      &RFC2119;
      &RFC2606;
      &RFC2782;
      &RFC2845;
    </references>

    <references title="Informative references">
      <reference anchor="RPZ" target="http://ftp.isc.org/isc/dnsrpz/isc-tn-2010-1.txt">
	<front>
	  <title>DNS Response Policy Zones (DNS RPZ)</title>
	  <author fullname="Paul Vixie" initials="P." surname="Vixie" />
	  <author fullname="Vernon Schryver" initials="V." surname="Schryver" />
	  <date year="2010" />
	</front>
      </reference>
      <reference anchor="Metazones" target="http://ss.vix.su/~vixie/mz.pdf">
	<front>
	  <title>Federated Domain Name Service Using DNS Metazones</title>
	  <author fullname="Paul Vixie" initials="P." surname="Vixie" />
	  <date year="2005" />
	</front>
      </reference>
    </references>

    <section title="Glossary" anchor="sec-glossary">
      <t>
	<list style="hanging" hangIndent="6">

	  <t hangText="Catalog zone:">A DNS zone containing a DNS
	  catalog, that is, a list of DNS zones and associated template
	  zone configuration common to all member zones.</t>

	  <t hangText="Member zone:">A DNS zone whose configuration is
	  published inside a catalog zone.</t>

	  <t hangText="Member zone name hash:">The hexadecimal format
	  40-digit SHA-1 digest, of a zone name in uncompressed wire
	  format.</t>

	  <t hangText="Zone property:">A configuration parameter of a
	  zone, sometimes also called a zone option.</t>

	</list>
      </t>
    </section>

    <section title="Change History">
      <t>
        <list style="symbols">

          <t>
	    draft-muks-dnsop-dns-catalog-zones-00
            <vspace/>
            Initial draft based on internal documents.
          </t>

          <t>
	    draft-muks-dnsop-dns-catalog-zones-01
            <vspace/>
            TBD.
          </t>

        </list>
      </t>
    </section>

  </back>
</rfc>
